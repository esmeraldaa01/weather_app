{"version":3,"sources":["components/FormComponent.jsx","components/WeatherApp.jsx","App.js","reportWebVitals.js","index.js"],"names":["error","props","className","Form","useState","city","setCity","country","setCountry","onSubmit","e","preventDefault","loadweather","type","placeholder","required","value","onChange","target","Temp","min","max","WeatherApp","icon","celsius","temp_min","temp_max","description","App","undefined","main","data","setData","WEATHER_ICONS","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","calCelsius","temp","Math","floor","getWeatherIcon","icons","rangeId","bg","getWeather","a","fetch","apiData","json","response","console","log","cod","weather","id","name","sys","style","backgroundImage","backgroundSize","height","FormComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd8bedc4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Form = (props) => {\n  const [city, setCity] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n\n    props.loadweather(city, country);\n  };\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={onFormSubmit}>\n        <div>{props.error ? error(props.error) : \"\"}</div>\n        <div className=\"row\">\n          <div className=\"col-md-3\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"city\"\n              required\n              value={city}\n              onChange={(e) => setCity(e.target.value)}\n            />\n          </div>\n          <div className=\"col-md-3\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"country\"\n              required\n              value={country}\n              onChange={(e) => setCountry(e.target.value)}\n            />\n          </div>\n          <div className=\"col-md-3\">\n            <button type=\"submit\" className=\"btn btn-warning\">\n              Get Weather\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nconst error = (props) => {\n  return <div className=\"error\">{props}</div>;\n};\n\nexport default Form;\n","import React from \"react\";\n\nfunction Temp(min, max) {\n  if (max && min) {\n    return (\n      <h3>\n        <span>{min}&deg;</span>\n        <span>{max}&deg;</span>\n      </h3>\n    );\n  }\n}\n\nconst WeatherApp = (props) => {\n  return (\n    <div className=\"container\">\n      <div className=\"cards\">\n        <h1>\n          {props.city} {props.country}\n        </h1>\n        <h5 className=\"py-4\">\n          <i className={`wi ${props.icon} display-1`} />\n        </h5>\n\n        {props.celsius ? <h1 className=\"py-2\">{props.celsius}&deg;</h1> : null}\n\n        {Temp(props.temp_min, props.temp_max)}\n        <h4 className=\"py-3\">{props.description}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherApp;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport FormComponent from \"./components/FormComponent\";\nimport WeatherApp from \"./components/WeatherApp\";\n\nconst API_KEY = \"dcdec0fb58effd7deeef419ae8228050\";\n\nconst App = () => {\n  const [data, setData] = useState({\n    city: undefined,\n    country: undefined,\n    icon: undefined,\n    main: undefined,\n    celsius: undefined,\n    temp_max: undefined,\n    temp_min: undefined,\n    description: \"\",\n    error: false,\n  });\n\n  const WEATHER_ICONS = {\n    Thunderstorm: \"wi-thunderstorm\",\n    Drizzle: \"wi-sleet\",\n    Rain: \"wi-storm-showers\",\n    Snow: \"wi-snow\",\n    Atmosphere: \"wi-fog\",\n    Clear: \"wi-day-sunny\",\n    Clouds: \"wi-day-fog\",\n  };\n\n  const calCelsius = (temp) => {\n    let celsius = Math.floor(temp - 273.15);\n    return celsius;\n  };\n\n  const getWeatherIcon = (icons, rangeId) => {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        return {\n          icon: WEATHER_ICONS.Thunderstorm,\n          bg: \"https://images.unsplash.com/photo-1600377927594-ceae8f8981a6?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1374&q=80\",\n        };\n      case rangeId >= 300 && rangeId <= 321:\n        return {\n          icon: WEATHER_ICONS.Drizzle,\n          bg: \"https://images.unsplash.com/photo-1600415684478-744cf4f8f8d7?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1742&q=80\",\n        };\n      case rangeId >= 500 && rangeId <= 531:\n        return {\n          icon: WEATHER_ICONS.Rain,\n          bg: \"https://images.unsplash.com/photo-1508081317905-6dd972f752dd?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1740&q=80\",\n        };\n      case rangeId >= 600 && rangeId <= 622:\n        return {\n          icon: WEATHER_ICONS.Snow,\n          bg: \"https://images.unsplash.com/photo-1414541944151-2f3ec1cfd87d?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1748&q=80\",\n        };\n      case rangeId >= 700 && rangeId <= 781:\n        return {\n          icon: WEATHER_ICONS.Atmosphere,\n          bg: \"https://images.unsplash.com/photo-1606431318422-f48da4f56ab8?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1740&q=80\",\n        };\n      case rangeId === 800:\n        return {\n          icon: WEATHER_ICONS.Clear,\n          bg: \"https://images.unsplash.com/photo-1581347311939-a9faffc77861?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1740&q=80\",\n        };\n      case rangeId >= 801 && rangeId <= 804:\n        return {\n          icon: WEATHER_ICONS.Clouds,\n          bg: \"https://images.unsplash.com/photo-1523793740499-83d43b75a2b5?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1740&q=80\",\n        };\n      default:\n        return {\n          icon: WEATHER_ICONS.Clouds,\n          bg: \"https://images.unsplash.com/photo-1523793740499-83d43b75a2b5?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1740&q=80\",\n        };\n    }\n  };\n\n  const getWeather = async (city, country) => {\n    if (country && city) {\n      const apiData = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`\n      );\n\n      const response = await apiData.json();\n      console.log(response);\n\n      if (response.cod === \"404\") {\n        setData({ error: \"404 ERROR The Page could not found\" });\n        return;\n      }\n\n      const { icon, bg } = getWeatherIcon(\n        WEATHER_ICONS,\n        response.weather[0].id\n      );\n\n      setData({\n        ...data,\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.country,\n        main: response.weather[0].main,\n        celsius: calCelsius(response.main.temp),\n        temp_max: calCelsius(response.main.temp_max),\n        temp_min: calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false,\n        icon,\n        bg,\n      });\n    } \n    else {\n      setData({ ...data, error: true });\n    }\n  };\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        backgroundImage: `linear-gradient(to bottom, rgba(0, 0, 0, 0.4), rgba(117, 19, 93, 0.73)),\n      url(${data.bg})`,\n        backgroundSize: \"cover\",\n        height: \"100vh\",\n      }}\n    >\n      <FormComponent error={data.error} loadweather={getWeather} />\n      <WeatherApp {...data} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}